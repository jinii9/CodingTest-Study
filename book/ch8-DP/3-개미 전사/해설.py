# 정수 N을 입력 받기
n = int(input())
# 모든 식량 정보 입력 받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = array[0] ## 그 자체의 값이 최대값
d[1] = max(array[0], array[1])

for i in range(2, n):
    ## 이전 식량창고를 털었을 때 & 직전의 식량창고를 털지 않고 그 전 식량창고를 턴 경우를 합친 값 중 더 큰 값을 선택
    ## => i번째 식량창고까지의 "최대 식량 양"을 계산
    d[i] = max(d[i - 1], d[i - 2] + array[i])

# 계산된 결과 출력
print(d[n - 1])

#######################################################
## 점화식을 생각해 볼 것!

# DP 테이블
## d의 인덱스와 d의 인덱스에 해당하는 값을 뭘로 할지 잘 생각하자!
### d의 인덱스 : 식량창고의 위치
### (!중요) d의 인덱스에 해당하는 값 : "해당 식량창고까지의" 최대 식량 양
#### ex) d[3] = 8은 첫 번째 식량창고부터 네 번째 식량창고까지 고려했을 때 최대 식량의 양이 8이라는 것을 의미