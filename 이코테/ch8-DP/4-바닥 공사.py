# 정수 N을 입력 받기
n = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 1001

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[1] = 1 ## 바닥의 길이가 1일 때, 타일을 깔 수 있는 경우의 수 (2x1)
d[2] = 3 ## (2x1, 2x1) (1x2, 1x2) (2x2)
for i in range(3, n + 1):
    d[i] = (d[i - 1] + 2 * d[i - 2]) % 796796

# 계산된 결과 출력
print(d[n])

########################################################
# 점화식
## i-1, i-2일 경우, 어떻게 되는지 생각해보자!!
### i-1 : (2x1)
### i-2 : (1x2, 1x2), (2x2)
#### (중요) i-2에서 (2x1, 2x1)은 i-1에서 이미 해당 경우가 고려되었기 때문에 제거

# dp 테이블
## d의 인덱스 : 바닥의 길이(가로)
### ex) d[3]은 길이가 3인 바닥을 채우는 경우의 수를 의미
## d의 인덱스에 해당하는 값 : 해당 길이의 바닥을 채울 수 있는 경우의 수
### ex) d[3]의 값은 길이가 3인 바닥을 채우는 모든 방법의 수를 의미