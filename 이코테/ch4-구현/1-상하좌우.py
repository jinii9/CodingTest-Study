n = int(input())
x, y = 1, 1
plans = input().split()

# L, R, U, D에 따른 이동 방향
dx = [0, 0, -1, 1] ## 좌우로의 이동
## dx[0]:왼쪽 이동 # dx[1]:오른쪽 이동 # dx[2]:위로 이동 # dx[3]:아래로 이동
dy = [-1, 1, 0, 0] ## 상하로의 이동
move_types = ['L', 'R', 'U', 'D']

# 이동 계획을 하나씩 확인
for plan in plans:
    # 이동 후 좌표 구하기
    for i in range(len(move_types)):
        if plan == move_types[i]:
            nx = x + dx[i]
            ny = y + dy[i]
    # 공간을 벗어나는 경우 무시
    if nx < 1 or ny < 1 or nx > n or ny > n:
        continue
    # 이동 수행
    x, y = nx, ny

print(x, y)

#######################################################
# [문제 이해]
# (1, 2)에서 왼쪽 이동
## (1, 1) y축 - 1
# (1,1)에서 오른쪽 이동
## (1, 2) y축 + 1
# (2, 1)에서 위로 이동
## (1, 1) x축 - 1
## (1, 1)에서 아래로 이동
## (2, 1) x축 + 1
# --------------------------
### => dx=[0, 0, -1, 1] dy=[-1, 1, 0, 0]
### dx와 dy 리스트의 순서는 move_types 리스트의 순서와 일치해야 함!
### ex) dx[0]과 dy[0]는 'L'에 해당하는 왼쪽으로의 이동을 나타내는 값입니다.
### ex) dx[1]과 dy[1]는 'R'에 해당하는 오른쪽으로의 이동을 나타내는 값